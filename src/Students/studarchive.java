
package Students;


import admin.Dash;
import admin.archives;
import config.dbconnector;
import config.session;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;





/**
 *
 * @author entac
 */
public class studarchive extends javax.swing.JFrame {

    /**
     * Creates new form addstud
     */
    dbconnector db = new dbconnector();
    session ses = session.getInstance();
    
    public studarchive(){
        initComponents();
       
        tb();
        filter();
       
        
    }
   
    
    
 private void filter(){
       
        
        try{
       
        ResultSet rs = db.getData("SELECT DISTINCT lvl FROM tbl_gradelvl");
       
        gradelvl.addItem("All Grade Level");
        //section.addItem("All Sections");
          
       
       while(rs.next()){
           
           String grade = rs.getString("lvl");
           gradelvl.addItem(grade);
           
           
           
       }
      }catch(SQLException ex){
           System.out.println("Error");
          
      }
    }
    
     
    
    private void tb() {
   

    try {
        Statement st = db.connect.createStatement();
        String sql = "SELECT * FROM tbl_students WHERE s_stat = 'Archive'  ORDER BY s_last";
        ResultSet res = db.getData(sql);

        while (res.next()) {

            String id = String.valueOf(res.getString("s_id"));
            String tag = res.getString("s_tag");
            String last = res.getString("s_last");
            String mid = res.getString("s_mi");
            String first = res.getString("s_name");
            String grd = res.getString("s_grade");
            String sec = res.getString("s_section");
            String dob = res.getString("s_bday");
            String sex = res.getString("s_gender"); 
            String mobile = res.getString("s_mobile");
            String guard = res.getString("s_guard");
            String home = res.getString("s_add");
            String stats = res.getString("s_stat");

            String table[] = {id,tag,last,mid,first,dob,sex,grd,sec,mobile,guard,home,stats};

            DefaultTableModel tblmod = (DefaultTableModel)studlist.getModel();
            tblmod.addRow(table);

        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblback = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        section = new javax.swing.JComboBox<>();
        gradelvl = new javax.swing.JComboBox<>();
        txtsearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        del = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        refresh = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studlist = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblback.setFont(new java.awt.Font("DialogInput", 0, 11)); // NOI18N
        lblback.setText("[Back]");
        lblback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblbackMouseClicked(evt);
            }
        });
        jPanel1.add(lblback, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel2.setText("Student Archive");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        section.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionActionPerformed(evt);
            }
        });
        jPanel1.add(section, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 120, -1));

        gradelvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradelvlActionPerformed(evt);
            }
        });
        jPanel1.add(gradelvl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 110, -1));

        txtsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsearchActionPerformed(evt);
            }
        });
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });
        jPanel1.add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 200, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PIC/search.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, 30, 20));

        del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PIC/delete.png"))); // NOI18N
        del.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delMouseClicked(evt);
            }
        });
        jPanel1.add(del, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 50, 30, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PIC/update.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 50, 30, 30));

        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PIC/re.png"))); // NOI18N
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });
        jPanel1.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 50, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel4.setText("Filter");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PIC/kilid.jpg"))); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel8.setText("Any Key or TAG#");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, -1));

        studlist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tag#", "Last Name", "M.I", "First Name", "DOB", "Gender", "Grade", "Section", "Mobile", "Guardian", "Address", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(studlist);
        if (studlist.getColumnModel().getColumnCount() > 0) {
            studlist.getColumnModel().getColumn(0).setPreferredWidth(30);
            studlist.getColumnModel().getColumn(3).setPreferredWidth(10);
            studlist.getColumnModel().getColumn(4).setPreferredWidth(50);
            studlist.getColumnModel().getColumn(5).setPreferredWidth(20);
            studlist.getColumnModel().getColumn(6).setPreferredWidth(10);
            studlist.getColumnModel().getColumn(7).setPreferredWidth(20);
            studlist.getColumnModel().getColumn(8).setPreferredWidth(30);
            studlist.getColumnModel().getColumn(9).setPreferredWidth(50);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(880, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblbackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblbackMouseClicked
       addstud op = new addstud();
        op.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lblbackMouseClicked

    private void gradelvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradelvlActionPerformed

        section.removeAllItems();
       
        
        if(gradelvl.getSelectedItem().equals("All Grade Level")){
            DefaultTableModel model = (DefaultTableModel)studlist.getModel();
            model.setRowCount(0);
            section.addItem("All Sections");
            tb();
        }else{
         
         String grd = gradelvl.getSelectedItem().toString();
            
            String ser = "SELECT * FROM tbl_students WHERE s_grade LIKE '%" + grd + "%'";
            section.addItem("All Sections");
                 try {
        ResultSet res = db.getData(ser);
        
        DefaultTableModel model = (DefaultTableModel) studlist.getModel();
        model.setRowCount(0); 
      
                while (res.next()) {

                   String id = String.valueOf(res.getString("s_id"));
                   String tag = res.getString("s_tag");
                   String last = res.getString("s_last");
                   String mid = res.getString("s_mi");
                   String first = res.getString("s_name");
                   String grade = res.getString("s_grade");
                   String sec = res.getString("s_section");
                   String dob = res.getString("s_bday");
                   String sex = res.getString("s_gender"); 
                   String mobile = res.getString("s_mobile");
                   String guard = res.getString("s_guard");
                   String home = res.getString("s_add");

                   String table[] = {id,tag,last,mid,first,dob,sex,grade,sec,mobile,guard,home};

                   DefaultTableModel tblmod = (DefaultTableModel)studlist.getModel();
                   tblmod.addRow(table);

               }

           } catch(SQLException ex) {
               System.out.println("Error searching users: " + ex.getMessage());
           }
                 
        }           
        
          try{
              ResultSet rs;
              if (gradelvl.getSelectedItem() == "All Grade Level") {
                  rs = db.getData("SELECT DISTINCT section FROM tbl_gradelvl");
              }
              else {
                  rs = db.getData("SELECT section FROM tbl_gradelvl WHERE lvl = '"+gradelvl.getSelectedItem()+"'");
              }
              
              
            while(rs.next()){
                  
                  String grade = rs.getString("section");
                  section.addItem(grade);
           
       }
      }catch(SQLException ex){
           System.out.println("Error");
          
      }
              
           
       
    }//GEN-LAST:event_gradelvlActionPerformed

    private void txtsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsearchActionPerformed
       
    }//GEN-LAST:event_txtsearchActionPerformed

    private void delMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delMouseClicked
      int row = studlist.getSelectedRow();
      if(row < 0){
          JOptionPane.showMessageDialog(null,"Select Item");
      }else{
          TableModel mod = studlist.getModel();
            Object val = mod.getValueAt(row, 0);
            String id = val.toString();

            int a = JOptionPane.showConfirmDialog(null, "Are you sure you want to permanently delete ID " + id + "?", "Select", JOptionPane.YES_NO_OPTION);
            if (a == JOptionPane.YES_OPTION) {
                try {
                    int s_id = Integer.parseInt(id);

                    // Fetch the picture path before deleting the record
                    ResultSet res = db.getData("SELECT s_pic FROM tbl_students WHERE s_id = '" + id + "'");
                    String picPath = null;
                    if (res.next()) {
                        picPath = res.getString("s_pic");
                    }

                    // Delete the record from the database
                    db.delete(s_id, "tbl_students", "s_id");

                    // Delete the associated image file if it exists
                    if (picPath != null && !picPath.isEmpty()) {
                        File existingFile = new File(picPath);
                        if (existingFile.exists() && existingFile.isFile()) {
                            if (existingFile.delete()) {
                                System.out.println("File deleted successfully");
                            } else {
                                System.err.println("Failed to delete the file");
                            }
                        }
                    }

                    JOptionPane.showMessageDialog(null, "Item Deleted");
                } catch (SQLException ex) {
                    Logger.getLogger(archives.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "An error occurred while deleting the item.");
                } catch (NumberFormatException ex) {
                    Logger.getLogger(archives.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Invalid ID format.");
                }
            }
          DefaultTableModel def = (DefaultTableModel)studlist.getModel();
          def.setRowCount(0);
          tb();
      }
       
    }//GEN-LAST:event_delMouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        
        int row = studlist.getSelectedRow();
        
        if(row < 0){
            JOptionPane.showMessageDialog(null, "Select Item");
        }else{
            TableModel model = studlist.getModel();
                int a = JOptionPane.showConfirmDialog(null,"Are you Sure You want to Retrieve " + model.getValueAt(row, 0) , "Select", JOptionPane.YES_NO_OPTION);
                if( a == 0){
                    db.update("UPDATE tbl_students SET s_stat = 'Active' WHERE s_id = '"+model.getValueAt(row,0)+"'",false);
                    JOptionPane.showMessageDialog(null,"Item Restored");
                    
                }
            DefaultTableModel def = (DefaultTableModel)studlist.getModel();
            def.setRowCount(0);
            tb();
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
    
        DefaultTableModel model = (DefaultTableModel)studlist.getModel();
        model.setRowCount(0);
        tb();      
        
      
    }//GEN-LAST:event_refreshMouseClicked

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
         String query = txtsearch.getText();
         String searchQuery = "SELECT * FROM tbl_students WHERE (s_name LIKE '%" + query + "%' OR s_last LIKE '%" + query + "%' "
                               + "OR s_tag LIKE '%"+query+"%') AND s_grade = '"+gradelvl.getSelectedItem()+"' ";
          
    try {
        ResultSet res = db.getData(searchQuery);
        
        DefaultTableModel model = (DefaultTableModel) studlist.getModel();
        model.setRowCount(0); 
      
         while (res.next()) {

            String id = String.valueOf(res.getString("s_id"));
            String tag = res.getString("s_tag");
            String last = res.getString("s_last");
            String mid = res.getString("s_mi");
            String first = res.getString("s_name");
            String grd = res.getString("s_grade");
            String sec = res.getString("s_section");
            String dob = res.getString("s_bday");
            String sex = res.getString("s_gender"); 
            String mobile = res.getString("s_mobile");
            String guard = res.getString("s_guard");
            String home = res.getString("s_add");

            String table[] = {id,tag,last,mid,first,dob,sex,grd,sec,mobile,guard,home};

            DefaultTableModel tblmod = (DefaultTableModel)studlist.getModel();
            tblmod.addRow(table);

        }
        
    } catch(SQLException ex) {
        System.out.println("Error searching users: " + ex.getMessage());
    }
        
    }//GEN-LAST:event_txtsearchKeyReleased

    private void sectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionActionPerformed
      String grd = gradelvl.getSelectedItem() != null ? gradelvl.getSelectedItem().toString() : "";
        String ser;

        if (section.getSelectedItem() != null && section.getSelectedItem().equals("All Sections")) {
            ser = "SELECT * FROM tbl_students WHERE s_grade LIKE '%" + grd + "%'";
        } else {
            String sec = section.getSelectedItem() != null ? section.getSelectedItem().toString() : "";
            ser = "SELECT * FROM tbl_students WHERE s_section LIKE '%" + sec + "%' AND s_grade LIKE '%" + grd + "%'";
        }
   
        try {
        ResultSet res = db.getData(ser);

        DefaultTableModel model = (DefaultTableModel) studlist.getModel();
        model.setRowCount(0);

        while (res.next()) {
            String id = res.getString("s_id");
            String tag = res.getString("s_tag");
            String last = res.getString("s_last");
            String mid = res.getString("s_mi");
            String first = res.getString("s_name");
            String grade = res.getString("s_grade");
            String sec = res.getString("s_section");
            String dob = res.getString("s_bday");
            String sex = res.getString("s_gender");
            String mobile = res.getString("s_mobile");
            String guard = res.getString("s_guard");
            String home = res.getString("s_add");

            String[] table = {id, tag, last, mid, first, dob, sex, grade, sec, mobile, guard, home};

            DefaultTableModel tblmod = (DefaultTableModel) studlist.getModel();
            tblmod.addRow(table);
        }

        } catch (SQLException ex) {
        System.out.println("Error searching users: " + ex.getMessage());
        }
    }//GEN-LAST:event_sectionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(studarchive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(studarchive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(studarchive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(studarchive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new studarchive().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel del;
    private javax.swing.JComboBox<String> gradelvl;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblback;
    private javax.swing.JLabel refresh;
    private javax.swing.JComboBox<String> section;
    private javax.swing.JTable studlist;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
